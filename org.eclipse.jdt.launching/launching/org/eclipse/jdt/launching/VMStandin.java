package org.eclipse.jdt.launching;/**********************************************************************Copyright (c) 2000, 2002 IBM Corp.  All rights reserved.This file is made available under the terms of the Common Public License v1.0which accompanies this distribution, and is available athttp://www.eclipse.org/legal/cpl-v10.html**********************************************************************/import java.io.File;import java.net.URL;/** * An implementation of IVMInstall that is used for manipulating VMs without necessarily  * committing changes. * <p> * Instances of this class act like wrappers.  All other instances of IVMInstall represent  * 'real live' VMs that may be used for building or launching.  Instances of this class * behave like 'temporary' VMs that are not visible and not available for building or launching. * </p> * <p> * Instances of this class may be constructed as a preliminary step to creating a 'live' VM * or as a preliminary step to making changes to a 'real' VM. * </p> * When <code>convertToRealVM</code> is called, a corresponding 'real' VM is created * if one did not previously exist, or the corresponding 'real' VM is updated. * </p> * <p> * Clients may instantiate this class; it is not intended to be subclassed. * </p> *  * @since 2.1 */public class VMStandin extends AbstractVMInstall {	/**	 * @see org.eclipse.jdt.launching.AbstractVMInstall#AbstractVMInstall(org.eclipse.jdt.launching.IVMInstallType, java.lang.String)	 */	public VMStandin(IVMInstallType type, String id) {		super(type, id);	}		/**	 * Construct a <code>VMStandin</code> instance based on the specified <code>IVMInstall</code>.	 * Changes to this standin will not be reflected in the 'real' VM until <code>convertToRealVM</code>	 * is called.	 * 	 * @param realVM the 'real' VM from which to construct this standin VM	 */	public VMStandin(IVMInstall realVM) {		this (realVM.getVMInstallType(), realVM.getId());		setName(realVM.getName());		setInstallLocation(realVM.getInstallLocation());		setLibraryLocations(realVM.getLibraryLocations());		setJavadocLocation(realVM.getJavadocLocation());	}		/**	 * If no corresponding 'real' VM exists, create one and populate it from this standin instance. 	 * If a corresponding VM exists, update its attributes from this standin instance.	 * 	 * @return IVMInstall the 'real' corresponding to this standin VM	 */	public IVMInstall convertToRealVM() {		IVMInstallType vmType= getVMInstallType();		IVMInstall realVM= vmType.findVMInstall(getId());				if (realVM == null) {			realVM= vmType.createVMInstall(getId());		}				realVM.setName(getName());		realVM.setInstallLocation(getInstallLocation());		realVM.setLibraryLocations(getLibraryLocations());		realVM.setJavadocLocation(getJavadocLocation());		return realVM;	}		/**	 * Return true if either the library or javadoc locations differ.  This is useful in	 * conjunction with 'equals()' to determine if two VMStandins fundamentally represent	 * the same VM, but have differences.	 * 	 * @param otherVMStandin the other instance of <code>VMStandin</code> to which this	 *                        instance is compared.	 * @return <code>true</code> if the specified <code>VMStandin</code> instance and this 	 *          instance differ in their library locations or javadoc locations, <code>false</code>	 *          otherwise	 */	public boolean different(VMStandin otherVMStandin) {				// Compare library locations		LibraryLocation[] libLocs = getLibraryLocations();		LibraryLocation[] otherLibLocs = otherVMStandin.getLibraryLocations();		if (libLocs != null) {			if (!libLocs.equals(otherLibLocs)) {				return true;			} 		} else {			if (otherLibLocs != null) {				return true;			}		}						// Compare Javadoc locations								URL javadocURL = getJavadocLocation();		URL otherJavadocURL = otherVMStandin.getJavadocLocation();		if (javadocURL != null) {			if (!javadocURL.equals(otherJavadocURL)) {				return true;			}		} else {			if (otherJavadocURL != null) {				return true;			}		}		// If we got this far, library locations & javadoc locations must be the same				return false;	}		/**	 * Two VMStandins are equal if their names, types and install locations are equal.	 * 	 * @see java.lang.Object#equals(Object)	 */	public boolean equals(Object obj) {		if (!(obj instanceof VMStandin)) {			return false;		}				// Compare the names		VMStandin otherVMStandin = (VMStandin) obj;		String name = getName();		String otherName = otherVMStandin.getName();		if (name != null) {			if (!name.equals(otherName)) {				return false;			}		} else {			if (otherName != null) {				return false;			}		}				// Compare install locations		File installLocation = getInstallLocation();		File otherInstallLocation = otherVMStandin.getInstallLocation();		if (installLocation != null) {			if (!installLocation.equals(otherInstallLocation)) {				return false;			}		} else {			if (otherInstallLocation != null) {				return false;			}		}				// Name & install locations must be the same		return true;	}	}