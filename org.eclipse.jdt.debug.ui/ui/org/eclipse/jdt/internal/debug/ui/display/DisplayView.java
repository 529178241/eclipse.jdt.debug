package org.eclipse.jdt.internal.debug.ui.display;/* * (c) Copyright IBM Corp. 2000, 2001. * All Rights Reserved. */import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import org.eclipse.jdt.debug.ui.IJavaDebugUIConstants;import org.eclipse.jdt.internal.debug.ui.IHelpContextIds;import org.eclipse.jdt.internal.debug.ui.JDIContentAssistPreference;import org.eclipse.jdt.internal.debug.ui.JDIDebugUIPlugin;import org.eclipse.jdt.internal.debug.ui.JDISourceViewer;import org.eclipse.jdt.internal.ui.JavaPlugin;import org.eclipse.jdt.ui.text.JavaTextTools;import org.eclipse.jface.action.IAction;import org.eclipse.jface.action.IMenuListener;import org.eclipse.jface.action.IMenuManager;import org.eclipse.jface.action.IToolBarManager;import org.eclipse.jface.action.MenuManager;import org.eclipse.jface.action.Separator;import org.eclipse.jface.preference.IPreferenceStore;import org.eclipse.jface.preference.PreferenceConverter;import org.eclipse.jface.resource.JFaceResources;import org.eclipse.jface.text.BadLocationException;import org.eclipse.jface.text.Document;import org.eclipse.jface.text.IDocument;import org.eclipse.jface.text.IDocumentPartitioner;import org.eclipse.jface.text.ITextOperationTarget;import org.eclipse.jface.text.ITextSelection;import org.eclipse.jface.text.contentassist.ContentAssistant;import org.eclipse.jface.text.contentassist.IContentAssistant;import org.eclipse.jface.text.source.ISourceViewer;import org.eclipse.jface.util.IPropertyChangeListener;import org.eclipse.jface.util.PropertyChangeEvent;import org.eclipse.swt.SWT;import org.eclipse.swt.custom.StyledText;import org.eclipse.swt.custom.VerifyKeyListener;import org.eclipse.swt.events.VerifyEvent;import org.eclipse.swt.graphics.Font;import org.eclipse.swt.graphics.FontData;import org.eclipse.swt.graphics.Point;import org.eclipse.swt.widgets.Composite;import org.eclipse.swt.widgets.Menu;import org.eclipse.ui.IActionBars;import org.eclipse.ui.IMemento;import org.eclipse.ui.IViewSite;import org.eclipse.ui.IWorkbenchActionConstants;import org.eclipse.ui.PartInitException;import org.eclipse.ui.help.WorkbenchHelp;import org.eclipse.ui.part.ViewPart;import org.eclipse.ui.texteditor.ITextEditorActionConstants;import org.eclipse.ui.texteditor.IUpdate;public class DisplayView extends ViewPart implements IPropertyChangeListener {			class DataDisplay implements IDataDisplay {		/**		 * @see IDataDisplay#clear()		 */		public void clear() {			IDocument document= fSourceViewer.getDocument();			if (document != null) {				document.set(""); //$NON-NLS-1$			}		}				/**		 * @see IDataDisplay#displayExpression(String)		 */		public void displayExpression(String expression) {			ITextSelection selection= (ITextSelection)fSourceViewer.getSelection();			int offset= selection.getOffset();			expression= expression.trim();			StringBuffer buffer= new StringBuffer(expression);			buffer.append(System.getProperty("line.separator")); //$NON-NLS-1$			buffer.append('\t');			expression= buffer.toString();			try {				fSourceViewer.getDocument().replace(offset, selection.getLength(), expression);					fSourceViewer.setSelectedRange(offset + expression.length(), 0);					fSourceViewer.revealRange(offset, expression.length());			} catch (BadLocationException ble) {				JDIDebugUIPlugin.log(ble);			}		}						/**		 * @see IDataDisplay#displayExpressionValue(String)		 */		public void displayExpressionValue(String value) {			value= value + System.getProperty("line.separator"); //$NON-NLS-1$			ITextSelection selection= (ITextSelection)fSourceViewer.getSelection();			int offset= selection.getOffset();			int length= value.length();			int replace= selection.getLength() - offset;			if (replace < 0) {				replace= 0;			}			try {				fSourceViewer.getDocument().replace(offset, replace, value);				} catch (BadLocationException ble) {				JDIDebugUIPlugin.log(ble);			}			fSourceViewer.setSelectedRange(offset + length, 0);				fSourceViewer.revealRange(offset, length);		}	}				protected IDataDisplay fDataDisplay= new DataDisplay();			protected JDISourceViewer fSourceViewer;	protected IAction fClearDisplayAction;	protected IAction fContentAssistAction;	protected Map fGlobalActions= new HashMap(4);	protected List fSelectionActions= new ArrayList(3);	protected String fRestoredContents= null;		private Font fFont= null;	/**	 * @see ViewPart#createChild(IWorkbenchPartContainer)	 */	public void createPartControl(Composite parent) {				int styles= SWT.V_SCROLL | SWT.H_SCROLL | SWT.MULTI | SWT.FULL_SELECTION;		fSourceViewer= new JDISourceViewer(parent, null, styles);		fSourceViewer.configure(new DisplayViewerConfiguration());		JavaPlugin.getDefault().getPreferenceStore().addPropertyChangeListener(this);		IDocument doc= getRestoredDocument();		setViewerFont(fSourceViewer);		fSourceViewer.setDocument(doc);		fRestoredContents= null;		initializeActions();		initializeToolBar();		// create context menu		MenuManager menuMgr = new MenuManager("#PopUp"); //$NON-NLS-1$		menuMgr.setRemoveAllWhenShown(true);		menuMgr.addMenuListener(new IMenuListener() {			public void menuAboutToShow(IMenuManager mgr) {				fillContextMenu(mgr);			}		});				Menu menu = menuMgr.createContextMenu(fSourceViewer.getTextWidget());		fSourceViewer.getTextWidget().setMenu(menu);		getSite().registerContextMenu(menuMgr, fSourceViewer.getSelectionProvider());				getSite().setSelectionProvider(fSourceViewer.getSelectionProvider());		WorkbenchHelp.setHelp(fSourceViewer.getTextWidget(), IHelpContextIds.DISPLAY_VIEW);			}	protected IDocument getRestoredDocument() {		IDocument doc= null;		if (fRestoredContents != null) {			doc= new Document(fRestoredContents);		} else {			doc= new Document();		}		JavaTextTools tools= JavaPlugin.getDefault().getJavaTextTools();		IDocumentPartitioner partitioner= tools.createDocumentPartitioner();		partitioner.connect(doc);		doc.setDocumentPartitioner(partitioner);		return doc;	}	/**	 * @see IWorkbenchPart#setFocus()	 */	public void setFocus() {		if (fSourceViewer != null) {			fSourceViewer.getControl().setFocus();		}	}		/**	 * Initialize the actions of this view	 */	protected void initializeActions() {						fClearDisplayAction= new ClearDisplayAction(this);		IActionBars actionBars = getViewSite().getActionBars();				IAction action;				action= new DisplayViewAction(this, fSourceViewer.CUT);		action.setText(DisplayMessages.getString("DisplayView.Cut.label")); //$NON-NLS-1$		action.setToolTipText(DisplayMessages.getString("DisplayView.Cut.tooltip")); //$NON-NLS-1$		action.setDescription(DisplayMessages.getString("DisplayView.Cut.description")); //$NON-NLS-1$		setGlobalAction(actionBars, ITextEditorActionConstants.CUT, action);				action= new DisplayViewAction(this, fSourceViewer.COPY);		action.setText(DisplayMessages.getString("DisplayView.Copy.label")); //$NON-NLS-1$		action.setToolTipText(DisplayMessages.getString("DisplayView.Copy.tooltip")); //$NON-NLS-1$		action.setDescription(DisplayMessages.getString("DisplayView.Copy.description")); //$NON-NLS-1$		setGlobalAction(actionBars, ITextEditorActionConstants.COPY, action);				action= new DisplayViewAction(this, fSourceViewer.PASTE);		action.setText(DisplayMessages.getString("DisplayView.Paste.label")); //$NON-NLS-1$		action.setToolTipText(DisplayMessages.getString("DisplayView.Paste.tooltip")); //$NON-NLS-1$		action.setDescription(DisplayMessages.getString("DisplayView.Paste.Description")); //$NON-NLS-1$		setGlobalAction(actionBars, ITextEditorActionConstants.PASTE, action);				action= new DisplayViewAction(this, fSourceViewer.SELECT_ALL);		action.setText(DisplayMessages.getString("DisplayView.SelectAll.label")); //$NON-NLS-1$		action.setToolTipText(DisplayMessages.getString("DisplayView.SelectAll.tooltip")); //$NON-NLS-1$		action.setDescription(DisplayMessages.getString("DisplayView.SelectAll.description")); //$NON-NLS-1$		setGlobalAction(actionBars, ITextEditorActionConstants.SELECT_ALL, action);				fSelectionActions.add(ITextEditorActionConstants.CUT);		fSelectionActions.add(ITextEditorActionConstants.COPY);		fSelectionActions.add(ITextEditorActionConstants.PASTE);				fContentAssistAction= new DisplayViewAction(this, ISourceViewer.CONTENTASSIST_PROPOSALS);		fContentAssistAction.setText(DisplayMessages.getString("DisplayView.Co&ntent_Assist@Ctrl+Space_1")); //$NON-NLS-1$		fContentAssistAction.setDescription(DisplayMessages.getString("DisplayView.Content_Assist_2")); //$NON-NLS-1$		fContentAssistAction.setToolTipText(DisplayMessages.getString("DisplayView.Content_Assist_2")); //$NON-NLS-1$				actionBars.updateActionBars();		addVerifyKeyListener();	}		protected void addVerifyKeyListener() {		fSourceViewer.getTextWidget().addVerifyKeyListener(new VerifyKeyListener() {			public void verifyKey(VerifyEvent event) {				//do code assist for CTRL-SPACE				if (event.stateMask == SWT.CTRL && event.keyCode == 0) {					if (event.character == 0x20) {						if(fContentAssistAction.isEnabled()) {							fContentAssistAction.run();							event.doit= false;						}					}				}			}		});	}		protected void setGlobalAction(IActionBars actionBars, String actionID, IAction action) {		fGlobalActions.put(actionID, action);		actionBars.setGlobalActionHandler(actionID, action);	}	/**	 * Configures the toolBar.	 */	protected void initializeToolBar() {		IToolBarManager tbm = getViewSite().getActionBars().getToolBarManager();		tbm.add(new Separator(IJavaDebugUIConstants.EVALUATION_GROUP));		tbm.add(fClearDisplayAction);		getViewSite().getActionBars().updateActionBars();	}	/**	 * Adds the context menu actions for the display view.	 */	protected void fillContextMenu(IMenuManager menu) {				if (fSourceViewer.getDocument() == null) {			return;		} 		updateActions();		menu.add(new Separator(IJavaDebugUIConstants.EVALUATION_GROUP));		menu.add(fContentAssistAction);		menu.add(new Separator());				menu.add((IAction) fGlobalActions.get(ITextEditorActionConstants.CUT));		menu.add((IAction) fGlobalActions.get(ITextEditorActionConstants.COPY));		menu.add((IAction) fGlobalActions.get(ITextEditorActionConstants.PASTE));		menu.add((IAction) fGlobalActions.get(ITextEditorActionConstants.SELECT_ALL));		menu.add(new Separator());		menu.add(fClearDisplayAction);		menu.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));	}	/**	 * @see WorkbenchPart#getAdapter(Class)	 */	public Object getAdapter(Class required) {					if (ITextOperationTarget.class.equals(required)) {			return fSourceViewer.getTextOperationTarget();		}					if (IDataDisplay.class.equals(required)) {			return fDataDisplay;		}				return super.getAdapter(required);	}		protected void updateActions() {		Iterator iterator = fSelectionActions.iterator();		while (iterator.hasNext()) {			IAction action = (IAction) fGlobalActions.get((String)iterator.next());			if (action instanceof IUpdate) {				 ((IUpdate) action).update();			}		}	}				/**	 * Saves the contents of the display view and the formatting.	 * 	 * @see IViewPart#saveState(IMemento)	 */	public void saveState(IMemento memento) {		if (fSourceViewer != null) {			IDocument doc= fSourceViewer.getDocument();			String contents= doc.get().trim();			memento.putTextData(contents);		} else if (fRestoredContents != null) {			memento.putTextData(fRestoredContents);		}	}		/**	 * Restores the contents of the display view and the formatting.	 * 	 * @see IViewPart#init(IViewSite, IMemento)	 */	public void init(IViewSite site, IMemento memento) throws PartInitException {		init(site);		if (memento != null) {			fRestoredContents= memento.getTextData();		}	}		/**	 * Returns the entire contents of the current document.	 */	protected String getContents() {		return fSourceViewer.getDocument().get();	}			/**	 * @see IPropertyChangeListener#propertyChange(PropertyChangeEvent)	 */	public void propertyChange(PropertyChangeEvent event) {		IContentAssistant assistant= fSourceViewer.getContentAssistant();		if (assistant instanceof ContentAssistant) {			JDIContentAssistPreference.changeConfiguration((ContentAssistant) assistant, event);		}		String property= event.getProperty();				if (JFaceResources.TEXT_FONT.equals(property)) {			setViewerFont(fSourceViewer);		}				if (affectsTextPresentation(event)) {			fSourceViewer.invalidateTextPresentation();		}	}	/**	 * @see WorkbenchPart#dispose()	 */		public void dispose() {		super.dispose();		if (getFont() != null) {			getFont().dispose();			setFont(null);		}		JavaPlugin.getDefault().getPreferenceStore().removePropertyChangeListener(this);	}		private void setViewerFont(ISourceViewer viewer) {				IPreferenceStore store= JavaPlugin.getDefault().getPreferenceStore();		if (store != null) {			FontData data= null;						if (store.contains(JFaceResources.TEXT_FONT) && !store.isDefault(JFaceResources.TEXT_FONT)) {				data= PreferenceConverter.getFontData(store, JFaceResources.TEXT_FONT);			} else {				data= PreferenceConverter.getDefaultFontData(store, JFaceResources.TEXT_FONT);			}						if (data != null) {								Font font= new Font(viewer.getTextWidget().getDisplay(), data);				setFont(viewer, font);								if (getFont() != null) {					getFont().dispose();				}				setFont(font);				return;			}		}				// if all the preferences failed		setFont(viewer, JFaceResources.getTextFont());	}		/**	 * Sets the font for the given viewer sustaining selection and scroll position.	 * 	 * @param sourceViewer the source viewer	 * @param font the font	 */	private void setFont(ISourceViewer sourceViewer, Font font) {		IDocument doc= sourceViewer.getDocument();		if (doc != null && doc.getLength() > 0) {			Point selection= sourceViewer.getSelectedRange();			int topIndex= sourceViewer.getTopIndex();						StyledText styledText= sourceViewer.getTextWidget();			styledText.setRedraw(false);						styledText.setFont(font);			sourceViewer.setSelectedRange(selection.x , selection.y);			sourceViewer.setTopIndex(topIndex);						styledText.setRedraw(true);		} else {			sourceViewer.getTextWidget().setFont(font);		}		}		protected Font getFont() {		return fFont;	}		protected void setFont(Font font) {		fFont = font;	}		/**	 * @see AbstractTextEditor#affectsTextPresentation(PropertyChangeEvent)	 */	protected boolean affectsTextPresentation(PropertyChangeEvent event) {		JavaTextTools textTools= JavaPlugin.getDefault().getJavaTextTools();		return textTools.affectsBehavior(event);	}}