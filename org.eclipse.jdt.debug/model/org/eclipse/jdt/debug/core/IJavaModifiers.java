package org.eclipse.jdt.debug.core;

/*
 * Licensed Materials - Property of IBM,
 * WebSphere Studio Workbench
 * (c) Copyright IBM Corp 2000
 */
 
import org.eclipse.debug.core.DebugException;

/**
 * This interface defines accessors common to Java debug
 * elements that have  underlying Java member declarations.
 * For example, the method associated with a stack frame,
 * or the field associated with a variable.
 * <p>
 * Clients are not intended to implement this interface.
 * </p>
 * <b>Note:</b> This class/interface is part of an interim API that is still under development and expected to 
 * change significantly before reaching stability. It is being made available at this early stage to solicit feedback 
 * from pioneering adopters on the understanding that any code that uses this API will almost certainly be broken
 * (repeatedly) as the API evolves.
 * </p>
 */
public interface IJavaModifiers {		

	/**
	 * Returns whether this element has been declared as public.
	 *
	 * @return whether this element has been declared as public
	 * @exception DebugException if unable to determine if this
	 *   element has been declared as public
	 */
	public boolean isPublic() throws DebugException;
	/**
	 * Returns whether this element has been declared as private.
	 *
	 * @return whether this element has been declared as private
	 * @exception DebugException if unable to determine if this
	 *   element has been declared as private
	 */
	public boolean isPrivate() throws DebugException;
	/**
	 * Returns whether this element has been declared as protected.
	 *
	 * @return whether this element has been declared as protected
	 * @exception DebugException if unable to determine if this
	 *   element has been declared as protected
	 */
	public boolean isProtected() throws DebugException;
	/**
	 * Returns whether this element has been declared with
	 * no protection modifier (i.e. package private protection).
	 *
	 * @return whether this element is package private
	 * @exception DebugException if unable to determine if this
	 *   element has been declared as package private
	 */
	public boolean isPackagePrivate() throws DebugException;
	/**
	 * Returns whether this element has been declared as final.
	 * 
	 * @return whether this element has been declared as final
	 * @exception DebugException if unable to determine if this
	 *   element has been declared as final
	 */
	public boolean isFinal() throws DebugException;
	/**
	 * Returns whether this element has been declared as static.
	 * 
	 * @return whether this element has been declared as static
	 * @exception DebugException if unable to determine if this
	 *   element has been declared as static
	 */
	public boolean isStatic() throws DebugException;
	/**
	 * Returns whether this element is synthetic. 
	 * Synthetic members are generated by the compiler
	 * and are not present in source code.
	 *
	 * @return whether this element is synthetic
	 * @exception DebugException if unable to determine if this
	 *   element is synthetic
	 */
	public boolean isSynthetic() throws DebugException;


}


